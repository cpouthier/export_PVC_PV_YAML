apiVersion: cr.kanister.io/v1alpha1
kind: Blueprint
metadata:
  name: pvc-pv-export-pre-snap-bp
  namespace: kasten-io
actions:
  preSnapshot:
    phases:
      - func: KubeTask
        name: exportPVCandPV
        args:
          image: bitnami/kubectl:1.27  
          command:
            - bash
            - -c
            - |
              apt update && apt install -y jq yq || apk add jq yq
              NS="{{ .Namespace.Name }}"
              APP_CM_NAME="cm-pvc-pv"
              CONFIGMAP_LABEL_NS="kasten-io"
              CONFIGMAP_LABEL_NAME="sc-label"
              TMP_DIR=$(mktemp -d)

              echo "📥 Using target namespace: $NS"

              # Read label selector from configmap
              SC_LABEL=$(kubectl get configmap "$CONFIGMAP_LABEL_NAME" -n "$CONFIGMAP_LABEL_NS" -o jsonpath='{.data.storageClassLabel}')
              [ -z "$SC_LABEL" ] && echo "❌ No storageClassLabel defined" && exit 1

              # Get SC names
              SC_NAMES=$(kubectl get storageclass -l "$SC_LABEL" -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}')

              for SC in $SC_NAMES; do
                PVC_LIST=$(kubectl get pvc -n "$NS" -o json | jq -r --arg sc "$SC" '.items[] | select(.spec.storageClassName==$sc) | .metadata.name')
                for PVC in $PVC_LIST; do
                  PV_NAME=$(kubectl get pvc "$PVC" -n "$NS" -o jsonpath='{.spec.volumeName}')
                  [ -z "$PV_NAME" ] && continue

                  kubectl get pvc "$PVC" -n "$NS" -o yaml > "$TMP_DIR/pvc-${PVC}.yaml"
                  kubectl get pv "$PV_NAME" -o yaml > "$TMP_DIR/pv-${PV_NAME}.yaml"
                done
              done

              for file in "$TMP_DIR"/*.yaml; do
                kind=$(yq e '.kind' "$file")
                if [ "$kind" = "PersistentVolume" ]; then
                  yq e 'del(.metadata.annotations, .metadata.finalizers, .metadata.managedFields, .metadata.uid, .metadata.resourceVersion, .metadata.creationTimestamp, .status, .spec.claimRef.uid, .spec.claimRef.resourceVersion)' -i "$file"
                elif [ "$kind" = "PersistentVolumeClaim" ]; then
                  yq e 'del(.metadata.annotations, .metadata.finalizers, .metadata.managedFields, .metadata.uid, .metadata.resourceVersion, .metadata.creationTimestamp, .status)' -i "$file"
                fi
              done

              kubectl delete configmap "$APP_CM_NAME" -n "$NS" --ignore-not-found
              kubectl create configmap "$APP_CM_NAME" -n "$NS" --from-file="$TMP_DIR" --dry-run=client -o yaml | kubectl apply -f -
